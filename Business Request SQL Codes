### AtliQ Mart Business Request

This README provides a summary of SQL queries used to generate Business Request insights for AtliQ Mart Sales Director. 

## Request 1: Provide a list of products with a base price greater than 500 and that are featured in promo type of 'BOGOF' (Buy One Get One Free).  This information will help us identify high-value products that are currently being heavily discounted, which can be useful for  evaluating our pricing and promotion strategies.


SELECT product_name, base_price, promo_type
FROM fact_events e
LEFT JOIN dim_products p
ON e.product_code=p.product_code
WHERE base_price>500 AND promo_type="BOGOF"
GROUP BY base_price
ORDER BY base_price DESC;
```

## Request 2 : Generate a report that provides an overview of the number of stores in each city. The report includes two essential fields: city  and store count, which will assist in optimizing our retail operations.

SELECT city, COUNT(store_id) as store_count
FROM dim_stores
GROUP BY city
ORDER BY store_count DESC;

## Task 3: Generate a report that displays each campaign along with the total revenueÂ generated before and after the campaign? The report includes three key fields: campaign_name, total_revenue(before and after promotion). 

SELECT c.campaign_name, 
       CONCAT(ROUND(SUM(base_price*`quantity_sold(before_promo)`/1000000),2),"M") AS total_revenue_before_promotion,
       CONCAT(ROUND(SUM(base_price*`quantity_sold(after_promo)`/1000000),2),"M") AS total_revenue_after_promotion
FROM fact_events e
JOIN dim_campaigns c
ON e.campaign_id=c.campaign_id
GROUP BY c.campaign_name;

## Task 4: Produce a report that calculates the Incremental Sold Quantity (ISU%) for each category during the Diwali campaign. Additionally, provide rankings for the categories based on their ISU%. The report will include three key fields: category, ISU%, and rank order. 

WITH Diwali_ISU AS (
  SELECT p.category,
         ROUND((SUM(`quantity_sold(after_promo)`) - SUM(`quantity_sold(before_promo)`)) / SUM(`quantity_sold(before_promo)`) * 100,2) AS ISU_Percentage
  FROM fact_events e
  JOIN dim_campaigns c ON e.campaign_id = c.campaign_id
  JOIN dim_products p ON e.product_code = p.product_code
  WHERE campaign_name = 'Diwali'
  GROUP BY p.category
)
SELECT category, ISU_Percentage, RANK() OVER (ORDER BY ISU_Percentage DESC) AS rank_order, campaign_name
FROM Diwali_ISU
WHERE campaign_name = 'Diwali'
GROUP BY p.category;

## Task 5: Create a report featuring the Top 5 products, ranked by Incremental Revenue Percentage (IR%), across all campaigns. The report will provide essential information including product name, category, and IR%. 

WITH IR_Percentage AS (
  SELECT p.product_name,
         p.category,
         CAST((SUM(base_price*`quantity_sold(after_promo)`)-SUM(base_price*`quantity_sold(before_promo)`))
               /SUM(base_price*`quantity_sold(before_promo)`/100) AS SIGNED) AS IR_percentage
  FROM fact_events e
  JOIN dim_products P ON e.product_code = p.product_code
  GROUP BY p.product_name, p.category
)
SELECT product_name, category, IR_percentage
FROM IR_Percentage
ORDER BY IR_percentage DESC
LIMIT 5;
